# VNC Cloudflared Docker Client - Docker Compose Configuration
# Copyright (c) 2025 VNC Cloudflared Docker Contributors
# Licensed under the MIT License

version: '3.8'

services:
  vnc-tunnel:
    build: 
      context: .
      dockerfile: Dockerfile
    image: vnc-cloudflared:latest
    container_name: ${COMPOSE_PROJECT_NAME:-vnc-tunnel}_client
    restart: unless-stopped
    
    # Cloudflared configuration
    volumes:
      - cloudflared-config:/home/nonroot/.cloudflared
      - /etc/localtime:/etc/localtime:ro  # Sync container time with host
    
    # Environment configuration
    environment:
      - TZ=${TZ:-UTC}
      - TUNNEL_LOGLEVEL=${TUNNEL_LOGLEVEL:-info}
      - TUNNEL_TRANSPORT_LOGLEVEL=${TUNNEL_TRANSPORT_LOGLEVEL:-warn}
      - TUNNEL_METRICS=${TUNNEL_METRICS:-0.0.0.0:2000}
      - TUNNEL_RETRIES=${TUNNEL_RETRIES:-5}
      - TUNNEL_GRACE_PERIOD=${TUNNEL_GRACE_PERIOD:-30s}
    
    # Command to establish TCP tunnel
    command: 
      - access
      - tcp
      - --hostname=${VNC_HOSTNAME}
      - --url=tcp://localhost:5901
      - --loglevel=${TUNNEL_LOGLEVEL:-info}
      - --transport-loglevel=${TUNNEL_TRANSPORT_LOGLEVEL:-warn}
      - --metrics=${TUNNEL_METRICS:-0.0.0.0:2000}
      - --grace-period=${TUNNEL_GRACE_PERIOD:-30s}
    
    # Port mapping - customize VNC_LOCAL_PORT in .env
    ports:
      - "${VNC_LOCAL_PORT:-5902}:5901"
      - "127.0.0.1:${METRICS_PORT:-2000}:2000"  # Metrics endpoint (localhost only)
    
    # Network configuration
    networks:
      - vnc-network
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"
        labels: "service=vnc-tunnel,profile=${COMPOSE_PROJECT_NAME:-default}"
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "cloudflared", "version"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-10s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '${CONTAINER_CPU_LIMIT:-0.5}'
          memory: ${CONTAINER_MEMORY_LIMIT:-256M}
        reservations:
          cpus: '${CONTAINER_CPU_RESERVATION:-0.1}'
          memory: ${CONTAINER_MEMORY_RESERVATION:-128M}
      restart_policy:
        condition: on-failure
        delay: ${RESTART_DELAY:-5s}
        max_attempts: ${RESTART_MAX_ATTEMPTS:-3}
        window: ${RESTART_WINDOW:-120s}
    
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
    
    # Additional labels for organization
    labels:
      - "com.vnc-cloudflared.description=VNC Cloudflare Tunnel Client"
      - "com.vnc-cloudflared.version=1.0.0"
      - "com.vnc-cloudflared.profile=${COMPOSE_PROJECT_NAME:-default}"

# Volumes for persistent data
volumes:
  cloudflared-config:
    name: ${COMPOSE_PROJECT_NAME:-vnc-tunnel}_cloudflared-config
    labels:
      - "com.vnc-cloudflared.description=Cloudflared authentication data"

# Networks
networks:
  vnc-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-vnc-tunnel}_network
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
    labels:
      - "com.vnc-cloudflared.description=VNC tunnel network"